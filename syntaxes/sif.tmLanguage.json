{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "SIF",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#fields"
        },
        {
            "include": "#sections"
        },
        {
            "include": "#fieldsbackref"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#simulation"
        },
        {
            "include": "#solver-General"
        },
        {
            "include": "#solver-Outputs"
        },
        {
            "include": "#solver-SaveData"
        },
        {
            "include": "#solver-ResultOutputSolver"
        },
        {
            "include": "#solver-StressSolver"
        },
        {
            "include": "#material-data"
        },
        {
            "include": "#datatypes"
        },
        {
            "include": "#options"
        },
        {
            "include": "#moretags"
        },
        {
            "include": "#morestrings"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.tdb",
                    "match": "!.*"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric",
                    "match": "((([+-]\\s*)|(\\b))((\\d+(\\.\\d+)?)|(\\.\\d+)))(\\s*[eE]([+-]\\s*)?((\\d+(\\.\\d+)?)|(\\.\\d+)))?\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.control.operator",
                    "match": "[-\\*/\\\\+=]"
                },
                {
                    "name": "keyword.control.other",
                    "match": "\\b(?i)(LN)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.ref.tdb",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.ref-strings.tdb",
                    "match": "\\\\."
                }
            ]
        },
        "datatypes": {
            "patterns": [
                {
                    "name": "entity.name.class",
                    "match": "\\b(Real|Integer|Logical|String|File)\\b"
                },
                {
                    "name": "entity.name.class",
                    "match": "\\b(MATC|cubic)\\b"
                }
            ]
        },
        "options": {
            "patterns": [
                {
                    "name": "entity.name.tag",
                    "match": "\\b(Warn|Cartesian|BDF|Iterative|BiCGStab|ILU(\\d+)|Residual|Absolute(\\s+)Mass)\\b"
                },
                {
                    "name": "entity.name.tag",
                    "match": "\\b(Steady state|Transient)\\b"
                },
                {
                    "name": "entity.name.tag",
                    "match": "\\b(True|False)\\b"
                },
                {
                    "name": "entity.name.tag",
                    "match": "\\b(Always|After(\\s+)Timestep|After(\\s+)Simulation)\\b"
                },
                {
                    "name": "entity.name.tag",
                    "match": "\\b(Idealized|Diffuse(\\s+)Gray)\\b"
                },
                {
                    "name": "entity.name.tag",
                    "match": "\\b(Heat(\\s+)Equation|Advection(\\s+)Diffusion(\\s+)Equation)\\b"
                },
                {
                    "name": "entity.name.tag",
                    "match": "\\b(Flux(\\s+)and(\\s+)Gradient)\\b"
                },
                {
                    "name": "entity.name.tag",
                    "match": "\\b(SaveLine|SaveMaterials)\\b"
                }
            ]
        },
        "sections": {
            "patterns": [
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^(I|i)nclude)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(End)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^Header$)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^Simulation$)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^Constants$)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^Run(\\s+)Control$)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^(Solver)(\\s+)(\\d+)$)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^(Equation)(\\s+)(\\d+)$)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^(Material)(\\s+)(\\d+)$)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^(Body(((\\s+)Force)?))(\\s+)(\\d+)$)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^((Initial|Boundary)(\\s+)Condition)(\\s+)(\\d+)$)\\b"
                },
                {
                    "name": "keyword.control.sif",
                    "match": "\\b(^(Component)(\\s+)(\\d+)$)\\b"
                }
            ]
        },
        "fields": {
            "patterns": [
                {
                    "meta": "Header",
                    "name": "entity.name.function",
                    "match": "\\b(CHECK(\\s+)KEYWORDS|Mesh(\\s+)DB|Include(\\s+)Path|Results(\\s+)Directory)\\b"
                },
                {
                    "meta": "Equation",
                    "name": "entity.name.function",
                    "match": "\\b(Active(\\s+)Solvers|Concentration(\\s+)Units)\\b"
                },
                {
                    "meta": "many",
                    "name": "entity.name.function",
                    "match": "\\b(Name|Save(\\s+)(Flux|Line)|Size)\\b"

                },
                {
                    "meta": "Solver",
                    "name": "entity.name.function",
                    "match": "\\b(Flux(\\s+)(Coefficient|Variable))\\b"
                },
                {
                    "meta": "Solver",
                    "name": "entity.name.function",
                    "match": "\\b(Calculate(\\s+)(Flux|Grad)(((\\s+)Magnitude)?))\\b"
                },
                {
                    "meta": "Boundary Condition",
                    "name": "entity.name.function",
                    "match": "\\b(Target(\\s+)Boundaries)\\b"
                },
                {
                    "meta": "Boundary Condition",
                    "name": "entity.name.function",
                    "match": "\\b(((External(\\s+))?)(Concentration|Temperature))\\b"
                },
                {
                    "meta": "Boundary Condition",
                    "name": "entity.name.function",
                    "match": "\\b((Heat|Mass)(\\s+)Transfer(\\s+)Coefficient)\\b"
                },
                {
                    "meta": "Boundary Condition",
                    "name": "entity.name.function",
                    "match": "\\b(Temperature|Heat(\\s+)Flux|Emissivity)\\b"
                },
                {
                    "meta": "Boundary Condition",
                    "name": "entity.name.function",
                    "match": "\\b(Radiation(((\\s+)(Boundary|Target Body))?))\\b"
                },
                {
                    "meta": "Body",
                    "name": "entity.name.function",
                    "match": "\\b(Target(\\s+)Bodies)\\b"
                }
            ]
        },
        "fieldsbackref": {
            "patterns": [
                {
                    "comment": "https://stackoverflow.com/questions/6448573/",
                    "name": "entity.name.type",
                    "match": "[^=]*(Variable)(\\s+)([a-zA-Z]+((,(\\s+)[a-zA-Z]+))?)\\n$"
                },
                {
                    "comment": "What is not covered by the above...",
                    "name": "entity.name.tag",
                    "match": "[^=]*(\\s+)([a-zA-Z]+((,(\\s+)[a-zA-Z]+))?)\\n$"
                },
                {
                    "meta": "Solver (comes later because refers to other fields!)",
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Stabilize|Optimize Bandwidth|Steady State Convergence Tolerance|Steady State Convergence Measure|Nonlinear System Convergence Tolerance|Nonlinear System Max Iterations|Nonlinear System Newton After Iterations|Nonlinear System Newton After Tolerance|Nonlinear System Relaxation Factor|Nonlinear System Convergence Measure|Linear System Solver|Linear System Iterative Method|Linear System Max Iterations|Linear System Convergence Tolerance|BiCGstabl polynomial degree|Linear System Preconditioning|Linear System ILUT Tolerance|Linear System Abort Not Converged|Linear System Residual Output|Linear System Precondition Recompute|Parameter(\\s+)(\\d+)))\\b"
                },
                {
                    "meta": "Body (comes later because refers to other fields!)",
                    "name": "entity.name.function",
                    "match": "\\b((Body(\\s+)(\\d+))*(Equation|Material|Initial(\\s+)condition))\\b"
                }
            ]
        },

        "constants": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b((Constants)*(Gravity))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Constants)*(Stefan(\\s+)Boltzmann))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Constants)*(Permittivity(\\s+)of(\\s+)Vacuum))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Constants)*(Permeability(\\s+)of(\\s+)Vacuum))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Constants)*(Boltzmann(\\s+)Constant))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Constants)*(Unit(\\s+)Charge))\\b"
                }
            ]
        },
        "simulation": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*((Solver(\\s+)Input|Post)(\\s+)File))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Coordinate(\\s+)(System|Mapping)))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Output(\\s+)(File|Variable(\\s+)(\\d+))))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Restart(\\s+)(File|Position|Variable(\\s+)(\\d+)|Time(((\\s+)Ignore)?))))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Binary(\\s+)Output))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Max(\\s+)Output(\\s+)Level))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Simulation(\\s+)Type))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Steady(\\s+)State(\\s+)Max(\\s+)Iterations))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Output(\\s+)Intervals))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Timestep(\\s+)intervals))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Timestep(\\s+)Sizes))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Timestepping(\\s+)Method))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(BDF(\\s+)Order))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Newmark(\\s+)Beta))\\b"
                }
            ]
        },
        "solver-General": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Procedure))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Equation))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Exec(\\s+)Solver))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(((Target(\\s+))?)Variable))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Mask(\\s+)(Variable|Name|Condition)))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Polyline(\\s+)(Coordinates|Divisions)))\\b"
                }
            ]
        },
        "solver-Outputs": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Filename(((\\s+)Numbering)?)))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Partition(((\\s+)Numbering)?)))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Output(\\s+)(Format|Directory)))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(File(\\s+)(Append)))\\b"
                }
            ]
        },
        "solver-SaveData": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Scalars(\\s+)Prefix))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(((Parallel(\\s+))?)Operator))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Coefficient))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Save(\\s+)(Points|Coordinates)))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Exact(\\s+)Coordinates))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Moving(\\s+)Mesh))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Show(\\s+)Norm(\\s+)Index))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Echo(\\s+)Values))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Cost(\\s+)Function(\\s+)Index))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Parallel(\\s+)Reduce))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Save(\\s+)(Eigenvalues|Eigenfrequencies)))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Boundary(\\s+)Condition(\\s+)(\\d+))*(Save(\\s+)Scalars))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Simulation)*(Scalars(\\s+)File))\\b"
                }
            ]
        },
        "solver-ResultOutputSolver": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b((Gid|Gmsh|Vtk|Vtu|Dx)(\\s+)Format)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Single(\\s+)Precision)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Eigen(\\s+)Analysis)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Number(\\s+)Of(\\s+)EigenModes)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Active(\\s+)EigenModes)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Scalar|Vector|Tensor)(\\s+)Field(\\s+)(\\d+))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Show(\\s+)Variables)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Save(\\s+)Geometry(\\s+)Ids)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Default(\\s+)(Body|BC)(\\s+)Id)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(BC(\\s+)Id(\\s+)Offset)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Save(\\s+)Elemental(\\s+)Fields)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Lagrange(\\s+)Element(\\s+)Degree)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Save(\\s+)Linear(\\s+)Elements)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Discontinuous(\\s+)(Galerkin|Bodies))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Vtu(\\s+)(Part|Time)(\\s+)Collection)\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Skip|Save)(\\s+)Halo(\\s+)Elements(((\\s+)Only)?))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b(Save(\\s+)(Bulk|Boundaries)(\\s+)Only)\\b"
                }
            ]
        },
        "solver-StressSolver": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b((Solver(\\s+)(\\d+))*(Variable(\\s+)DOFs))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Boundary(\\s+)Condition(\\s+)(\\d+))*(Displacement))\\b"
                }
            ]
        },
        "material-data": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Density))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Heat(\\s+)Capacity))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Enthalpy))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Heat(\\s+)Conductivity))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Heat(\\s+)(e|E)xpansion(\\s+)(c|C)oefficient))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Sound(\\s+)(s|S)peed))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Youngs(\\s+)(m|M)odulus))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Poisson(\\s+)(r|R)atio))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Concentration(\\s+)(d|D)iffusivity))\\b"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\b((Material(\\s+)(\\d+))*(Reference(\\s+)(t|T)emperature))\\b"
                }
            ]
        },

        "moretags": {
            "comment": "TODO: these should match any text (non-string) after equal",
            "patterns": [
                {
                    "name": "entity.name.tag",
                    "match": "[^=]*(\\s+)([a-zA-Z]+)\\n"
                },
                {
                    "comment": "Trying to get user-defined names (see https://stackoverflow.com/questions/70509807)",
                    "name": "invalid",
                    "match": "([a-zA-Z]+)(\\s+)*[^=]"
                },
                {
                    "comment": "See https://stackoverflow.com/questions/70509807 and try to get MATC syntax working",
                    "name": "invalid",
                    "match": "\\$.*"
                }
            ]
        },
        "morestrings": {
            "patterns": [
                {
                    "comment": "same as moretags first patter but with a period (extension-like)",
                    "name": "string",
                    "match": "[^=]*(\\s+)([a-zA-Z.]+)\\n"
                }
            ]
        }
    },
    "scopeName": "source.sif"
}